version: "2.4"

services:
  app:
    build:
      args:
        NODE_ENV: development
      context: .
      dockerfile: docker/Dockerfile
    container_name: "{{APP_NAME}}-app"
    env_file:
      - .env
    image: clevyr/{{APP_NAME}}
    restart: unless-stopped
    volumes:
      - .:/var/www/html
    working_dir: /var/www/html

  proxy:
    container_name: "{{APP_NAME}}-proxy"
    image: clevyr/caddy
    ports:
      - 80:80
    restart: unless-stopped
    volumes:
      - .:/var/www/html
    depends_on:
      - app

  worker:
    build:
      args:
        NODE_ENV: development
      context: .
      dockerfile: docker/Dockerfile
    command: ["s6-svscan", "/etc/s6"]
    container_name: "{{APP_NAME}}-worker"
    env_file:
      - .env
    image: clevyr/{{APP_NAME}}
    restart: unless-stopped
    volumes:
      - .:/var/www/html
    working_dir: /var/www/html

  database:
    container_name: "{{APP_NAME}}-database"
    environment:
      POSTGRES_USER: "$DB_USERNAME"
      POSTGRES_PASSWORD: "$DB_PASSWORD"
      POSTGRES_DB: "$DB_DATABASE"
    image: postgres:11.1-alpine
    restart: unless-stopped
    ports:
      - 127.0.0.1:5432:5432

  test_database:
    container_name: "{{APP_NAME}}-testing-database"
    environment:
      POSTGRES_USER: "$DB_USERNAME"
      POSTGRES_PASSWORD: "$DB_PASSWORD"
      POSTGRES_DB: "$DB_DATABASE"
    image: postgres:11.1-alpine
    restart: unless-stopped

  hot-reloader:
    command: ["sh", "-c", "npm ci && npm run dev -- --watch --watch-poll"]
    env_file:
        - .env
    image: node:lts-alpine
    restart: unless-stopped
    volumes:
      - .:/var/www/html
    working_dir: /var/www/html
